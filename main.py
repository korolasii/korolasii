import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from form_xml import main_format 
from api_sendler import main as main_api 

API_TOKEN = '7946467083:AAFi14SmZRrsmA5iP3lnSKcJHm8bPmogvpQ'
DOWNLOAD_FOLDER = 'downloads'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

myChat = '1098076988'

if not os.path.exists(DOWNLOAD_FOLDER):
    os.makedirs(DOWNLOAD_FOLDER)

@dp.message(F.text == '/start')
async def send_welcome(message: types.Message):

    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é.")

@dp.message(F.document)
async def handle_document(message: types.Message):
    file_name = message.document.file_name.lower()

    try:
        file_info = await bot.get_file(message.document.file_id)

        if file_name == "gods.xml":
            await bot.download_file(file_info.file_path, destination=file_name)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–µ–Ω—å
            await message.reply("‚úÖ –§–∞–π–ª 'gods.xml' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.")
            logging.info("–§–∞–π–ª 'gods.xml' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ—Ä–Ω–µ.")
            await bot.send_message(myChat, f"üì¶ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤: gods.xml")
            return

        elif file_name == "cost.xlsx":
            await bot.download_file(file_info.file_path, destination=file_name)
            await message.reply("‚úÖ –§–∞–π–ª 'cost.xlsx' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.")
            logging.info("–§–∞–π–ª 'cost.xlsx' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–æ—Ä–Ω–µ.")
            await bot.send_message(myChat, f"üì¶ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª —Ü–µ–Ω: cost.xlsx")
            return

        elif file_name.endswith('.xlsx'):
            file_path_local = os.path.join(DOWNLOAD_FOLDER, file_name)
            await bot.download_file(file_info.file_path, destination=file_path_local)

            await message.reply(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            await bot.send_message(myChat, f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            logging.info(f"–§–∞–π–ª '{file_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{file_path_local}'")

            name_without_extension = file_name[:file_name.rfind('.')]
            xml_file_name = f"{name_without_extension}.xml"

            main_format(file_path_local, xml_file_name)
            main_api(xml_file_name)

            await message.reply(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return

        else:
            await message.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .xlsx –∏–ª–∏ gods.xml.")
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{file_name}': {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        await bot.send_message(myChat, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{file_name}': {e}")


async def hourly_task():

    logging.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤ '–õ—é—Å—Ç–¥–æ—Ä—Ñ—Å—å–∫–∞'.")
    current_time_plus_3 = (datetime.now() + timedelta(hours=3)).strftime("%d.%m.%Y %H:%M:%S")
    
    processed_files_count = 0
    
    try:
        for file_name in os.listdir(DOWNLOAD_FOLDER):
            if file_name.endswith('.xlsx') and "–õ—é—Å—Ç–¥–æ—Ä—Ñ—Å—å–∫–∞".lower() in file_name.lower():
                file_path_local = os.path.join(DOWNLOAD_FOLDER, file_name)
                
                xml_file_name = "–õ—é—Å—Ç–¥–æ—Ä—Ñ—Å—å–∫–∞.xml"
                
                try:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")
                    main_format(file_path_local, xml_file_name)
                    print(f"–§–∞–π–ª '{file_name}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ '{xml_file_name}'.")

                    main_api(xml_file_name) 
                    print(f"–§–∞–π–ª '{xml_file_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API.")
                    
                    processed_files_count += 1
                    
                    notification_text = (
                        f"–ó–∞–¥–∞—á–∞ –ø–æ '–õ—é—Å—Ç–¥–æ—Ä—Ñ—Å—å–∫–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è: {current_time_plus_3}\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files_count}\n"
                        f"–§–∞–π–ª: {file_name}"
                    )

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{file_name}' –≤ –∑–∞–¥–∞—á–µ: {e}", exc_info=True)
                    await bot.send_message(myChat, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{file_name}': {e}")
        
        
        await bot.send_message(myChat, notification_text)
        logging.info(notification_text)

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
        await bot.send_message(myChat, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")
        
    try:
        for file_name in os.listdir(DOWNLOAD_FOLDER):
            if file_name.endswith('.xlsx') and "–¢—Ä–æ—ó—Ü—å–∫–∞".lower() in file_name.lower():
                file_path_local = os.path.join(DOWNLOAD_FOLDER, file_name)
                
                xml_file_name = "–¢—Ä–æ—ó—Ü—å–∫–∞.xml"
                
                try:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")
                    main_format(file_path_local, xml_file_name)
                    print(f"–§–∞–π–ª '{file_name}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ '{xml_file_name}'.")

                    main_api(xml_file_name) 
                    print(f"–§–∞–π–ª '{xml_file_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API.")
                    
                    processed_files_count += 1
                    
                    notification_text = (
                        f"–ó–∞–¥–∞—á–∞ –ø–æ '–¢—Ä–æ—ó—Ü—å–∫–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è: {current_time_plus_3}\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files_count}\n"
                        f"–§–∞–π–ª: {file_name}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{file_name}' –≤ –∑–∞–¥–∞—á–µ: {e}", exc_info=True)
                    await bot.send_message(myChat, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{file_name}': {e}")
        
        await bot.send_message(myChat, notification_text)
        logging.info(notification_text)

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
        await bot.send_message(myChat, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")


async def main():
    scheduler = AsyncIOScheduler()
    
    scheduler.add_job(hourly_task, 'interval', minutes=20) 




    scheduler.start()

    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)